# vim: set ft=python :

import math
import time
import cProfile

import Draft
import FreeCADGui
import OpenSCADUtils
import TechDraw
import Part
import DraftGeomUtils
from FreeCAD import Units

class Slice_Base(list):
  intersection_count: int
  plane = App.Vector(0, 0, 0)
  lowest_point = 0

  def __init__(self, doc, hull_body, intersection_count = 12):
    self.doc = doc
    self.hull_body = hull_body
    self.intersection_count = intersection_count

    self.slice()

  def slice(self):
    bound_box = self.hull_body.Shape.BoundBox
    self.lowest_point = bound_box.ZMin

    if self.plane == App.Vector(1, 0, 0):
      slice_range = bound_box.XLength
      slice_start = 0
      slice_end = bound_box.XMax
    elif self.plane == App.Vector(0, 1, 0):
      slice_range = bound_box.YLength
      slice_start = bound_box.YMin
      slice_end = bound_box.YMax
    elif self.plane == App.Vector(0, 0, 1):
      slice_range = bound_box.ZLength
      slice_start = bound_box.ZMin
      slice_end = bound_box.ZMax

    slice_width = slice_range / (self.intersection_count + 1)

    if self.plane == App.Vector(0, 1, 0):
      slice_start = bound_box.YMin + slice_width / 4 + 1
      slice_end = bound_box.YMax - slice_width / 4
      slice_width = abs(slice_start - slice_end) / (self.intersection_count - 1)

    section_positions = [slice_start + (i * slice_width) + 0.1 for i in range(self.intersection_count + 1)]

    slices = self.hull_body.Shape.slices(self.plane, section_positions)
    print(f"{len(slices.Wires)} sections drawn for the {self.plane} axis")
    for slice in slices.Wires:
      self += self.slice_to_edges(slice)

  def slice_to_edges(self, slice):
    all_edges = []
    for edge in slice.Edges:
      candiate = self.filter_edge(edge)
      if candiate:
        all_edges.append(candiate)

    wires = []
    for wire in Part.sortEdges(all_edges):
      wires.append(Part.Wire(wire))
    return wires

  @classmethod
  def filter_edge(cls, edge):
    start_point = edge.firstVertex()
    end_point = edge.lastVertex()

    if start_point.X < -0.0001 or end_point.X < -0.0001:
      return None

    return edge

  def longest_element(self, axis: App.Vector):
    longest = None
    for wire in self:
      if axis.x:
        if longest is None or wire.BoundBox.XLength > longest.BoundBox.XLength:
          longest = wire
      elif axis.y:
        if longest is None or wire.BoundBox.YLength > longest.BoundBox.YLength:
          longest = wire
      elif axis.z:
        if longest is None or wire.BoundBox.ZLength > longest.BoundBox.ZLength:
          longest = wire

    return longest


class Slice_CrossSection(Slice_Base):
  plane = App.Vector(0, 1, 0)


class Slice_Waterline(Slice_Base):
  plane = App.Vector(0, 0, 1)


class Slice_Profile(Slice_Base):
  plane = App.Vector(1, 0, 0)


class Slice_Diagonals(Slice_Base):
  plane = App.Vector(1, 0, 1)

  def __init__(self, doc, hull_body, ribs: Slice_CrossSection, intersection_count = 6):
    self.ribs = ribs
    super().__init__(doc, hull_body, intersection_count)

  def slice(self):
    """
    The Diagonals don't follow the same pattern as the other perspectives.
    The plane changes angle with each slice.
    """
    slice_angle_step = math.radians(90.0 / self.intersection_count / 1.8)

    angle = math.radians(90) - slice_angle_step

    for rib, position in self.iterate_longest_rib():
      if angle <= 0:
        break

      position.z -= 1
      dist = position.z - position.x / math.tan(-angle)

      print(f"Calculating diagonal. angle: {round(math.degrees(angle), 2)}  height: {round(dist, 2)}")

      plane = App.Vector(math.cos(angle), 0, math.sin(angle))
      slices = self.hull_body.Shape.slice(plane, math.sin(angle) * dist)
      if not slices:
        continue

      for slice in slices:
        wires = self.slice_to_edges(slice)
        self += wires

      angle -= slice_angle_step

  def iterate_longest_rib(self):
    rib = self.ribs.longest_element(self.plane)
    #Part.show(rib, "rib")
    part_length = rib.Length / self.intersection_count
    rib_parts = rib.discretize(Distance = part_length)
    distance = 0
    for index, position in enumerate(rib_parts):
      yield (rib, position)
      distance += part_length


  @classmethod
  def filter_edge(cls, edge):
    # Filter intersections with deck.
    sketch = doc.getObjectsByLabel('profile_deck')[0]
    for sketch_edge in sketch.Shape.Edges:
      for point in edge.Vertexes:
        point = point.Point
        point.x = 0
        point.y = -point.y
        point = Part.Vertex(point)
        common = point.common([sketch_edge])
        if common.Vertexes:
          return None

    # Filter edges ending when crossing over to other side of hull.
    start_point = edge.firstVertex()
    end_point = edge.lastVertex()

    if start_point.X < 0.0001 and end_point.X < 0.0001:
      return None

    #Part.show(edge)
    return edge


class View_Wireframe_Base:
  """
  Base class to display wireframe of hull.
  """
  intersection_count: int = 12
  name: str = "base_class"

  def __init__(self, parent_name: str, doc, hull_body, data: Slice_Base):
    self.name = f"{parent_name}__{self.plan_name}"
    self.wireframe_name = f"{parent_name}__{self.wireframe_name}"
    self.doc = doc
    self.hull_body = hull_body
    self.data = data

    self.create_blank_sketch()

    for slice_index, slice in enumerate(self.data):
      self.parse_slice(slice, slice_index)

    for shape in self.wireframe.OutList:
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).LineColor = self.colour
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).PointColor = self.colour

  def create_blank_sketch(self):
    self.wireframe = create_group(self.doc, self.wireframe_name)

  def parse_slice(self, slice, slice_index):
    if not slice:
      return
    new_object = Part.show(slice)
    self.wireframe.addObjects([new_object])


class View_Wireframe_Body(View_Wireframe_Base):
  plan_name = "plan_body"
  wireframe_name = "wireframe_body"
  plan_offset = App.Vector(+2000.0, 0.0, 0.0)
  colour_fore = (255, 0, 0)
  colour_aft = (255, 255, 0)
  colour = (255, 0, 0)

  def __init__(self, parent_name: str, doc, hull_body, data: Slice_Base):
    super().__init__(parent_name, doc, hull_body, data)

    for shape in self.wireframe_fore.OutList:
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).LineColor = self.colour_fore
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).PointColor = self.colour_fore

    for shape in self.wireframe_aft.OutList:
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).LineColor = self.colour_aft
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).PointColor = self.colour_aft


  def create_blank_sketch(self):
    self.wireframe_fore = create_group(self.doc, f"{self.wireframe_name}_fore")
    self.wireframe_aft = create_group(self.doc, f"{self.wireframe_name}_aft")
    self.wireframe = self.wireframe_fore

  def parse_slice(self, slice, slice_index):
    if slice_index > self.data.intersection_count / 2:
      self.wireframe = self.wireframe_fore
      self.colour = self.colour_fore
    else:
      self.wireframe = self.wireframe_aft
      self.colour = self.colour_aft

    super().parse_slice(slice, slice_index)


class View_Wireframe_Waterline(View_Wireframe_Base):
  plan_name = "plan_waterline"
  wireframe_name = "wireframe_waterline"
  plan_offset = App.Vector(+4000.0, 0.0, 0.0)
  colour = (0, 255, 0)


class View_Wireframe_Profile(View_Wireframe_Base):
  plan_name = "plan_profile"
  wireframe_name = "wireframe_profile"
  plan_offset = App.Vector(+6000.0, 0.0, 0.0)
  colour = (0, 0, 255)


class View_Wireframe_Diagonals(View_Wireframe_Base):
  plan_name = "plan_diagonal"
  wireframe_name = "wireframe_diagonal"
  plan_offset = App.Vector(+8000.0, 0.0, 0.0)
  colour = (200, 200, 200)


class Plans:
  def __init__(self, doc, parent_name: str, lowest_point: float):
    self.doc = doc
    self.lowest_point = lowest_point

    group_profile = create_group(doc, f"{parent_name}__plan_profile")
    group_body = create_group(doc, f"{parent_name}__plan_body")
    group_waterline = create_group(doc, f"{parent_name}__plan_waterline")

    offset_plan_profile = 1000
    offset_plan_body = 2000
    offset_plan_waterline = 3500

    for shape in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_profile"):
      self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, True, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, True)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, True)

    for shape in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_body_fore"):
      self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, True, False)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, True)

    for shape in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_body_aft"):
      self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, True, True)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, True)

    for shape in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_waterline"):
      self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, True)
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, True, False)

    for shape in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_diagonal"):
      self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, True, True)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, False)
      self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, True)


  def draw_line(self, shape, direction, x_pos, group, foreground: bool, mirror: bool):
    outline, _, _, _ = TechDraw.project(shape, direction)
    new = Part.show(outline, "outline")

    if direction == App.Vector(1, 0, 0):
      new.Placement = App.Placement(
          App.Vector(x_pos - self.lowest_point, 0, self.lowest_point),
          App.Vector(1, 0, 0), 180)

    if mirror:
      if direction == App.Vector(0, 1, 0):
        new.Placement = App.Placement(
            App.Vector(x_pos - self.lowest_point, 0, self.lowest_point),
            App.Vector(1, 0, 0), 180)
      elif direction == App.Vector(0, 0, 1):
        new.Placement = App.Placement(
            App.Vector(x_pos, 0, self.lowest_point),
            App.Vector(0, 1, 0), 180)
    else:
      if direction == App.Vector(0, 1, 0):
        new.Placement = App.Placement(
            App.Vector(x_pos - self.lowest_point, 0, self.lowest_point),
            App.Vector(1, 0, 0), 0)
      elif direction == App.Vector(0, 0, 1):
        new.Placement = App.Placement(
            App.Vector(x_pos, 0, self.lowest_point),
            App.Vector(0, 1, 0), 0)

    if foreground:
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).LineWidth = 2
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).PointSize = 2
    else:
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).LineWidth = 1
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).PointSize = 1

    group.addObjects([new])


def create_group(doc, name):
  print(f"Checking for: {name}")
  group = doc.getObjectsByLabel(name)
  if group:
    print(f"Removing previous sketch: {name}")
    OpenSCADUtils.removesubtree(group)

  return doc.addObject('App::DocumentObjectGroup', name)

def get_body():
  selected_objects = Gui.Selection.getSelection()
  if len(selected_objects) != 1:
    return None

  selected_object = selected_objects[0]
  if selected_object.TypeId == "PartDesign::Body":
    if "__plan_" in selected_object.Name:
      original_name = selected_object.Name.split("__plan_")[0]
      selected_object = doc.getObjectsByLabel(original_name)[0]
    return selected_object

  selected_object = selected_object.getParent()
  if selected_object.TypeId == "PartDesign::Body":
    if "__plan_" in selected_object.Name:
      original_name = selected_object.Name.split("__plan_")[0]
      selected_object = doc.getObjectsByLabel(original_name)[0]
    return selected_object

  return None

def perpendicular(wire, position):
  """
  Calculate angle perpendicular to wire.
  Args:
    wire: Part.Wire: A FreeCAD wire.
    position: App.Vector: Position on wire to calculate angle at.
  Returns:
    Tuple:
      Angle perpendicular to wire.
      Position on Z axis line at angle passing through input position crosses.
        Used for projecting slicing plane.
  """
  for edge in wire.OrderedEdges:
    shapes = edge.Curve.toBiArcs(1)
    for shape in shapes:
      distance = shape.projectPoint(position, "Distance")
      if len(distance) == 1 and distance[0] < 0.1:
        if isinstance(shape, Part.ArcOfCircle):
          vector = shape.Location - position
        elif isinstance(shape, Part.LineSegment):
          vector = (shape.EndPoint - shape.StartPoint).cross(App.Vector(0, 1, 0))
        else:
          print(shape)
          continue

        angle = vector.normalize().getAngle(App.Vector(0, 0, 1))
        print(angle, math.degrees(angle))
        angle += math.radians(10)

        z = position.z - position.x / math.tan(-angle)
        print(round(z, 2))

        #Part.show(Part.makeLine(position, App.Vector(0, 0, z)),  "line")
        #Part.show(Part.makeLine(position, position + vector.normalize() * 500),  "line")

        return (angle, z)
  return None


doc = App.ActiveDocument
body = get_body()

start = time.perf_counter()
pr = cProfile.Profile()
pr.enable()

if body:
  data_x = Slice_Profile(doc, body, intersection_count = 5)
  View_Wireframe_Profile(body.Name, doc, body, data_x)

  data_y = Slice_Waterline(doc, body, intersection_count = 6)
  View_Wireframe_Waterline(body.Name, doc, body, data_y)

  data_z = Slice_CrossSection(doc, body, intersection_count = 11)
  View_Wireframe_Body(body.Name, doc, body, data_z)

  data_xz = Slice_Diagonals(doc, body, data_z, intersection_count = 5)
  View_Wireframe_Diagonals(body.Name, doc, body, data_xz)

  lowest_point = min(data_x.lowest_point, data_y.lowest_point)
  lowest_point = min(lowest_point, data_z.lowest_point)

  Plans(doc, body.Name, lowest_point)


else:
  print("No hull selected.")

pr.disable()
pr.dump_stats("profile.cprof")
end = time.perf_counter()
print(f"Took {end - start} seconds")

