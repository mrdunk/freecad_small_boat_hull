# vim: set ft=python :
# vim: set expandtab :

import math
import time
import cProfile

import Draft
import FreeCADGui
import OpenSCADUtils
import TechDraw
import Part
import DraftGeomUtils
from FreeCAD import Units

class Slice_Base(list):
  intersection_count: int
  plane = App.Vector(0, 0, 0)
  lowest_point = 0
  section_positions = []

  def __init__(self, doc, hull_body, intersection_count = None, section_positions = []):
    self.doc = doc
    self.hull_body = hull_body
    self.intersection_count = intersection_count
    self.section_positions = section_positions
    bound_box = self.hull_body.Shape.BoundBox
    self.lowest_point = bound_box.ZMin

    self.slice()

  def _setup_section_positions(self):
    bound_box = self.hull_body.Shape.BoundBox

    self.slice_start = bound_box.ZMin
    slice_range = bound_box.ZLength
    self.slice_width = slice_range / (self.intersection_count + 1)

  def slice(self):

    if not self.section_positions:
      self._setup_section_positions()

      self.section_positions = [
            self.slice_start + (i * self.slice_width) + 0.1
            for i in range(self.intersection_count + 1)
          ]

    slices = self.hull_body.Shape.slices(self.plane, self.section_positions)
    print(f"{len(slices.Wires)} sections drawn for the {self.plane} axis")
    for slice in slices.Wires:
      self += self.slice_to_edges(slice)

  def slice_to_edges(self, slice):
    all_edges = []
    for edge in slice.Edges:
      candiate = self.filter_edge(edge)
      if candiate:
        all_edges.append(candiate)

    wires = []
    for wire in Part.sortEdges(all_edges):
      wires.append(Part.Wire(wire))
    return wires

  @classmethod
  def filter_edge(cls, edge):
    start_point = edge.firstVertex()
    end_point = edge.lastVertex()

    if start_point.X < -0.0001 or end_point.X < -0.0001:
      return None

    return edge

  def longest_element(self):
    longest = None
    for wire in self:
      if longest is None or wire.Length > longest.Length:
        longest = wire

    return longest


class Slice_CrossSection(Slice_Base):
  plane = App.Vector(0, 1, 0)

  def _setup_section_positions(self):
    bound_box = self.hull_body.Shape.BoundBox

    self.slice_start = bound_box.YMin
    slice_range = bound_box.YLength
    self.slice_width = slice_range / (self.intersection_count + 1)

  def _setup_section_positions(self):
    bound_box = self.hull_body.Shape.BoundBox

    if not self.section_positions:
      slice_range = bound_box.YLength
      slice_width = slice_range / (self.intersection_count + 1)
      slice_end = bound_box.YMax - slice_width / 4

      self.slice_start = bound_box.YMin + slice_width / 4 + 1
      self.slice_width = abs(self.slice_start - slice_end) / (self.intersection_count - 1)


class Slice_Waterline(Slice_Base):
  plane = App.Vector(0, 0, 1)

  def _setup_section_positions(self):
    bound_box = self.hull_body.Shape.BoundBox

    self.slice_start = bound_box.ZMin
    slice_range = bound_box.ZLength
    self.slice_width = slice_range / (self.intersection_count + 1)



class Slice_Profile(Slice_Base):
  plane = App.Vector(1, 0, 0)
  
  def _setup_section_positions(self):
    bound_box = self.hull_body.Shape.BoundBox

    self.slice_start = bound_box.XMin
    slice_range = bound_box.XLength
    self.slice_width = slice_range / (self.intersection_count + 1)



class Slice_Diagonals(Slice_Base):
  plane = App.Vector(1, 0, 1)

  def __init__(self, doc, hull_body, ribs: Slice_CrossSection, intersection_count = None, section_positions = []):
    self.ribs = ribs
    super().__init__(doc, hull_body, intersection_count, section_positions)

  def _iterate_positions(self):
    if self.section_positions:
      for angle, dist in self.section_positions:
        yield angle, dist
    else:
      assert self.intersection_count is not None
      angle = 90
      slice_angle_step = angle / self.intersection_count / 1.8

      for _, position in self.iterate_longest_rib():
        angle -= slice_angle_step
        if angle <= 0:
          break
        dist = position.z - position.x / math.tan(math.radians(-angle))
        yield angle, dist

  def slice(self):
    """
    The Diagonals don't follow the same pattern as the other perspectives.
    The plane changes angle with each slice.
    """
    for angle, dist in self._iterate_positions():
      print(f"Calculating diagonal. angle: {round(angle, 2)}  height: {round(dist, 2)}")

      plane = App.Vector(math.cos(math.radians(angle)), 0, math.sin(math.radians(angle)))
      slices = self.hull_body.Shape.slice(plane, math.sin(math.radians(angle)) * dist)
      if not slices:
        continue

      for slice in slices:
        wires = self.slice_to_edges(slice)
        if len(wires) > 1:
          longest = None
          for wire in wires:
            if longest is None or wire.Length > longest.Length:
              longest = wire
          wires = [longest]
        self += wires

  def iterate_longest_rib(self):
    rib = self.ribs.longest_element()
    #Part.show(rib, "rib")
    part_length = rib.Length / self.intersection_count
    rib_parts = rib.discretize(Distance = part_length)
    distance = 0
    for index, position in enumerate(rib_parts):
      yield (rib, position)
      distance += part_length


  @classmethod
  def filter_edge(cls, edge):
    # Filter edges ending when crossing over to other side of hull.
    start_point = edge.firstVertex()
    end_point = edge.lastVertex()
    if start_point.X < 0.0001 and end_point.X < 0.0001:
      return None

    # Filter intersections with deck.
    sketch = doc.getObjectsByLabel('profile_deck')[0]
    for sketch_edge in sketch.Shape.Edges:
      for point in edge.Vertexes:
        point = point.Point
        point.x = 0
        point = Part.Vertex(point)
        common = point.common([sketch_edge])
        if common.Vertexes:
          return None

    #Part.show(edge)
    return edge


class View_Wireframe_Base:
  """
  Base class to display wireframe of hull.
  """
  name: str = "base_class"

  def __init__(self, parent_name: str, doc, hull_body, data: Slice_Base):
    self.name = f"{parent_name}__{self.plan_name}"
    self.wireframe_name = f"{parent_name}__{self.wireframe_name}"
    self.doc = doc
    self.hull_body = hull_body
    self.data = data

    if not self._calculate():
      remove_group(doc, self.wireframe_name)
      return

    self.create_blank_sketch()

    for slice_index, slice in enumerate(self.data):
      self.parse_slice(slice, slice_index)

    for shape in self.wireframe.OutList:
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).LineColor = self.colour
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).PointColor = self.colour

    self._cleanup()

  def _cleanup(self):
    Gui.Selection.clearSelection()
    Gui.Selection.addSelection(self.doc.Name, self.wireframe_name)
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    if int(dimensions.get("show_wireframe")):
      Gui.runCommand('Std_ShowSelection', 0)
    else:
      Gui.runCommand('Std_HideSelection', 0)

  def _calculate(self):
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    return dimensions.get("calculate_wireframe")

  def create_blank_sketch(self):
    self.wireframe = create_group(self.doc, self.wireframe_name)

  def parse_slice(self, slice, slice_index):
    if not slice:
      return
    new_object = Part.show(slice)
    self.wireframe.addObjects([new_object])


class View_Wireframe_Body(View_Wireframe_Base):
  plan_name = "plan_body"
  wireframe_name = "wireframe_body"

  plan_offset = App.Vector(+2000.0, 0.0, 0.0)
  colour_fore = (255, 0, 0)
  colour_aft = (255, 255, 0)
  colour = (255, 0, 0)

  def __init__(self, parent_name: str, doc, hull_body, data: Slice_Base):
    super().__init__(parent_name, doc, hull_body, data)

    for shape in self.wireframe_fore.OutList:
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).LineColor = self.colour_fore
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).PointColor = self.colour_fore

    for shape in self.wireframe_aft.OutList:
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).LineColor = self.colour_aft
      FreeCADGui.getDocument(self.doc.Name).getObject(shape.Name).PointColor = self.colour_aft

    self._later_cleanup()

  def _cleanup(self):
    return

  def _later_cleanup(self):
    Gui.Selection.clearSelection()
    Gui.Selection.addSelection(self.doc.Name, self.wireframe_fore.Name)
    Gui.Selection.addSelection(self.doc.Name, self.wireframe_aft.Name)
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    if int(dimensions.get("show_wireframe")):
      Gui.runCommand('Std_ShowSelection', 0)
    else:
      Gui.runCommand('Std_HideSelection', 0)

  def _calculate(self):
    """ Always calculate this sub class. """
    return True

  def create_blank_sketch(self):
    self.wireframe_fore = create_group(self.doc, f"{self.wireframe_name}_fore")
    self.wireframe_aft = create_group(self.doc, f"{self.wireframe_name}_aft")
    self.wireframe = self.wireframe_fore

  def parse_slice(self, slice, slice_index):
    if slice_index > len(self.data) / 2:
      self.wireframe = self.wireframe_fore
      self.colour = self.colour_fore
    else:
      self.wireframe = self.wireframe_aft
      self.colour = self.colour_aft

    super().parse_slice(slice, slice_index)


class View_Wireframe_Waterline(View_Wireframe_Base):
  plan_name = "plan_waterline"
  wireframe_name = "wireframe_waterline"
  plan_offset = App.Vector(+4000.0, 0.0, 0.0)
  colour = (0, 255, 0)


class View_Wireframe_Profile(View_Wireframe_Base):
  plan_name = "plan_profile"
  wireframe_name = "wireframe_profile"
  plan_offset = App.Vector(+6000.0, 0.0, 0.0)
  colour = (0, 0, 255)


class View_Wireframe_Diagonals(View_Wireframe_Base):
  plan_name = "plan_diagonal"
  wireframe_name = "wireframe_diagonal"
  plan_offset = App.Vector(+8000.0, 0.0, 0.0)
  colour = (200, 200, 200)


class Plans:
  def __init__(self, doc, parent_name: str, lowest_point: float):
    self.doc = doc
    self.lowest_point = lowest_point

    plan_profile_name = f"{parent_name}__plan_profile"
    plan_body_name = f"{parent_name}__plan_body"
    plan_waterline_name = f"{parent_name}__plan_waterline"

    dimensions = doc.getObjectsByLabel("dimensions")[0]
    if not dimensions.get("calculate_plans"):
      remove_group(self.doc, plan_profile_name)
      remove_group(self.doc, plan_body_name)
      remove_group(self.doc, plan_waterline_name)
      return

    group_profile = create_group(doc, plan_profile_name)
    group_body = create_group(doc, plan_body_name)
    group_waterline = create_group(doc, plan_waterline_name)

    offset_plan_profile = 1000
    offset_plan_body = 2000
    offset_plan_waterline = 3500

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_profile"):
      for shape in shapes.OutList:
        self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, True, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, True)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, True)

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_body_fore"):
      for shape in shapes.OutList:
        self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, True, False)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, True)

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_body_aft"):
      for shape in shapes.OutList:
        self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, True, True)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, False, True)

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_waterline"):
      for shape in shapes.OutList:
        self.draw_line(shape.Shape, App.Vector(1, 0, 0), offset_plan_profile, group_profile, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, True)
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, True, False)

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_diagonal"):
      for shape in shapes.OutList:
        self.draw_line(shape.Shape, App.Vector(0, 0, 1), offset_plan_waterline, group_waterline, True, True)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, False)
        self.draw_line(shape.Shape, App.Vector(0, 1, 0), offset_plan_body, group_body, False, True)

    Gui.Selection.clearSelection()
    Gui.Selection.addSelection(self.doc.Name, f"{parent_name}__plan_profile")
    Gui.Selection.addSelection(self.doc.Name, f"{parent_name}__plan_body")
    Gui.Selection.addSelection(self.doc.Name, f"{parent_name}__plan_waterline")
    Gui.Selection.addSelection(self.doc.Name, f"{parent_name}__plan_diagonal")
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    if int(dimensions.get("show_plans")):
      Gui.runCommand('Std_ShowSelection', 0)
    else:
      Gui.runCommand('Std_HideSelection', 0)

  def draw_line(self, shape, direction, x_pos, group, foreground: bool, mirror: bool):
    outline, _, _, _ = TechDraw.project(shape, direction)
    new = Part.show(outline, "outline")

    if direction == App.Vector(1, 0, 0):
      new.Placement = App.Placement(
          App.Vector(x_pos - self.lowest_point, 0, self.lowest_point),
          App.Vector(1, 0, 0), 180)

    if mirror:
      if direction == App.Vector(0, 1, 0):
        new.Placement = App.Placement(
            App.Vector(x_pos - self.lowest_point, 0, self.lowest_point),
            App.Vector(1, 0, 0), 180)
      elif direction == App.Vector(0, 0, 1):
        new.Placement = App.Placement(
            App.Vector(x_pos, 0, self.lowest_point),
            App.Vector(0, 1, 0), 180)
    else:
      if direction == App.Vector(0, 1, 0):
        new.Placement = App.Placement(
            App.Vector(x_pos - self.lowest_point, 0, self.lowest_point),
            App.Vector(1, 0, 0), 0)
      elif direction == App.Vector(0, 0, 1):
        new.Placement = App.Placement(
            App.Vector(x_pos, 0, self.lowest_point),
            App.Vector(0, 1, 0), 0)

    if foreground:
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).LineWidth = 2
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).PointSize = 2
    else:
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).LineWidth = 1
      FreeCADGui.getDocument(self.doc.Name).getObject(new.Name).PointSize = 1

    group.addObjects([new])


class Components:
  stringers = []
  ribs = {}

  def __init__(self, doc, parent_name: str, body, diagonals: Slice_Diagonals):
    self.doc = doc
    self.parent_name = parent_name
    self.group = create_group(doc, f"{parent_name}__components")
    self.hull = body
    self.diagonals = diagonals
    ribs_data = {}
    rib_diagonal_intersections = {}
    self.rib_groups = {}
    self.stringers_group = None

    self.draw_stringers()
    self.draw_gunwale()

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_body_fore"):
      for shape in shapes.OutList:
        self.index_ribs(shape.Shape, ribs_data)

    for shapes in self.doc.getObjectsByLabel(f"{parent_name}__wireframe_body_aft"):
      for shape in shapes.OutList:
        self.index_ribs(shape.Shape, ribs_data)

    for y_pos in ribs_data:
      self.draw_rib(doc, y_pos, ribs_data[y_pos][0])

    self.mirror_sides()

  def index_ribs(self, shape, ribs_data):
    y_pos = str(round(shape.BoundBox.YMin)).replace("-", "m")
    if y_pos not in ribs_data:
      ribs_data[y_pos] = []

    ribs_data[y_pos].append(shape)

  def diagonal_normals(self):
    for diagonal in self.diagonals:
      shape = Part.Shape([diagonal])
      yield (shape, self.diagonal_normal_at(shape, shape.Vertexes[0]))

  def draw_stringers(self):
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    stringer_width = dimensions.get("stringer_width")
    stringer_depth = dimensions.get("stringer_depth")
    accurate_stringers = dimensions.get("accurate_stringers")
    self.stringers_deep = []

    hull = self.hull.copy()

    fatten = 0.1
    for d, normal in self.diagonal_normals():
      # Make stringer slightly bigger than it actually is so we don't hit boolean comparison
      # issues later due to faces being in the same place on identical planes.
      pattern = d.copy().translate(normal.cross(-App.Vector(0, 1, 0)) * (fatten / 2))
      pattern = pattern.makeOffset2D(-(stringer_depth + Units.Quantity(f"{fatten}mm")), openResult = True, fill = True)
      pattern.translate(normal.normalize() * ((stringer_width.Value + fatten) / 2))
      stringer = pattern.extrude(normal.normalize() * (-stringer_width.Value - fatten))

      # This deeper version of the stringer cuts the full notch out of the rib.
      # Since the plane of each stringer's curve is at a different angle to the main
      # hull it would be hard to calculate the correct shape for each notch.
      # Instead, this stringer extends all the way out of the notch so we can do a boolean cut.
      pattern_deep = d.copy().makeOffset2D(stringer_depth * 2, openResult = True, fill = False)
      pattern_deep = pattern_deep.makeOffset2D(-stringer_depth * 3, openResult = True, fill = True)
      pattern_deep.translate(normal.normalize() * stringer_width / 2)
      stringer_deep = pattern_deep.extrude(-normal.normalize() * stringer_width)

      if int(accurate_stringers):
        # Since the main stringer's outer face is likely to be collinear with the hull's outer surface,
        # bugs when performing the boolean operation to shape the outer face of the stringer to match
        # the outer face of the hull.
        # Instead we do the boolean operation with a copy of the deeper stringer,
        # then a 2nd boolean operation between that and the proper stringer (that has the correct dimensions).
        stringer_hull = stringer_deep.copy().common(hull)

        # This knocks off the sharp corner of the stringer that protrudes through the hull surface.
        # In real life, we'll use a plane.
        stringer = stringer_hull.common(stringer)

      self.stringers.append(stringer)
      self.stringers_deep.append(stringer_deep)

    # set up the group to store the displayed stringers in later.
    self.stringers_group = create_group(doc, f"stringers")
    self.group.addObjects([self.stringers_group])

  def draw_gunwale(self):
    profile_deck = doc.getObjectsByLabel('profile_deck')[0]
    plan_deck = doc.getObjectsByLabel('plan_deck')[0]
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    stringer_width = dimensions.get("stringer_width")
    stringer_depth = dimensions.get("stringer_depth")

    # Extrude deck_profile and deck_outline out to calculate meeting point at top
    # of gunwale.
    profile_extruded = profile_deck.Shape.extrude(App.Vector(1, 0, 0) * 1000)
    plan_extruded = plan_deck.Shape.extrude(App.Vector(0, 0, 1) * 1000)
    gunwale_wire = profile_extruded.section(plan_extruded)

    gunwale_offset = gunwale_wire.copy().extrude(App.Vector(0, 0, 1) * -stringer_width)
    gunwale_solid = gunwale_offset.extrude(App.Vector(1, 0, 0) * -stringer_depth)
    self.stringers.append(gunwale_solid)

    gunwale_deep_wire = gunwale_wire.copy().translate(App.Vector(0, 0, 1) * stringer_width.Value)
    gunwale_deep_wire = gunwale_deep_wire.translate(App.Vector(1, 0, 0) * stringer_depth.Value)
    gunwale_deep_offset = gunwale_deep_wire.extrude(App.Vector(0, 0, 1) * -stringer_width.Value * 2)
    gunwale_deep_solid = gunwale_deep_offset.extrude(App.Vector(1, 0, 0) * -stringer_depth.Value * 2)
    self.stringers_deep.append(gunwale_deep_solid)

  def draw_rib(self, doc, rib_index, rib_shape):
    dimensions = doc.getObjectsByLabel("dimensions")[0]
    stringer_width = dimensions.get("stringer_width")
    stringer_depth = dimensions.get("stringer_depth")
    rib_width = dimensions.get("rib_width")
    rib_depth = dimensions.get("rib_depth")

    if rib_shape.Length < 1:
      return

    if abs(rib_shape.BoundBox.XMax) > rib_depth * 2:
      rib_face = rib_shape.makeOffset2D(-rib_depth, openResult = True, fill = True)
    else:
      # Too small to do offset. Just make a solid rib.
      xmin = min(rib_shape.OrderedVertexes[0].X, rib_shape.OrderedVertexes[-1].X)
      zmin = min(rib_shape.OrderedVertexes[0].Z, rib_shape.OrderedVertexes[-1].Z)
      xmax = max(rib_shape.OrderedVertexes[0].X, rib_shape.OrderedVertexes[-1].X)
      zmax = max(rib_shape.OrderedVertexes[0].Z, rib_shape.OrderedVertexes[-1].Z)
      y = rib_shape.OrderedVertexes[0].Y

      edge_top = Part.makeLine((xmax, y, zmax), (0, y, zmax))
      edge_center = Part.makeLine((0, y, zmax), (0, y, zmin))
      wire = Part.Wire([rib_shape, edge_top, edge_center])
      rib_face = Part.Face(wire)

    rib_face.translate(-App.Vector(0, 1, 0) * rib_width / 2)

    for stringer_deep in self.stringers_deep:
      print("removing from rib", rib_index, stringer_deep, stringer_deep.TypeId)
      for solid in stringer_deep.Solids:
        rib_face = rib_face.cut(solid)

    rib_solid = rib_face.extrude(App.Vector(0, 1, 0) * rib_width)
    rib_solid = rib_solid.common(self.hull)

    self.ribs[rib_index] = rib_solid

    # set up the group to store the displayed ribs in later.
    group_component = create_group(doc, f"rib_{rib_index}")
    self.group.addObjects([group_component])
    self.rib_groups[rib_index] = group_component

  def mirror_sides(self):
    for rib_index, rib in self.ribs.items():
      print(rib_index, rib)
      rib_mirrored = rib.copy().mirror(App.Vector(0, 0, 0), App.Vector(1, 0, 0))
      rib = rib.fuse(rib_mirrored)
      rib = rib.removeSplitter()
      self.rib_groups[rib_index].addObjects([Part.show(rib)])

    for stringer in self.stringers:
      print(stringer)
      stringer_mirrored = stringer.copy().mirror(App.Vector(0, 0, 0), App.Vector(1, 0, 0))
      #stringer = stringer.fuse(stringer_mirrored)
      self.stringers_group.addObjects([Part.show(stringer), Part.show(stringer_mirrored)])

  @classmethod
  def diagonal_normal_at(cls, diagonal, point):
    for diagonal_edge in diagonal.Edges:
      return diagonal_edge.Curve.toShape().findPlane().Axis
    return None


def remove_group(doc, name):
  group = doc.getObjectsByLabel(name)
  if group:
    print(f"Removing previous sketch: {name}")
    OpenSCADUtils.removesubtree(group)


def create_group(doc, name):
  print(f"Checking for: {name}")
  group = doc.getObjectsByLabel(name)
  if group:
    print(f"Removing previous sketch: {name}")
    OpenSCADUtils.removesubtree(group)

  return doc.addObject('App::DocumentObjectGroup', name)

def get_body():
  selected_objects = Gui.Selection.getSelection()
  if len(selected_objects) != 1:
    return None

  selected_object = selected_objects[0]
  if selected_object.TypeId == "PartDesign::Body":
    if "__plan_" in selected_object.Name:
      original_name = selected_object.Name.split("__plan_")[0]
      selected_object = doc.getObjectsByLabel(original_name)[0]
    return selected_object

  selected_object = selected_object.getParent()
  if selected_object.TypeId == "PartDesign::Body":
    if "__plan_" in selected_object.Name:
      original_name = selected_object.Name.split("__plan_")[0]
      selected_object = doc.getObjectsByLabel(original_name)[0]
    return selected_object

  return None

def perpendicular(wire, position):
  """
  Calculate angle perpendicular to wire.
  Args:
    wire: Part.Wire: A FreeCAD wire.
    position: App.Vector: Position on wire to calculate angle at.
  Returns:
    Tuple:
      Angle perpendicular to wire.
      Position on Z axis line at angle passing through input position crosses.
        Used for projecting slicing plane.
  """
  for edge in wire.OrderedEdges:
    shapes = edge.Curve.toBiArcs(1)
    for shape in shapes:
      distance = shape.projectPoint(position, "Distance")
      if len(distance) == 1 and distance[0] < 0.1:
        if isinstance(shape, Part.ArcOfCircle):
          vector = shape.Location - position
        elif isinstance(shape, Part.LineSegment):
          vector = (shape.EndPoint - shape.StartPoint).cross(App.Vector(0, 1, 0))
        else:
          print(shape)
          continue

        angle = vector.normalize().getAngle(App.Vector(0, 0, 1))
        print(angle, math.degrees(angle))
        angle += math.radians(10)

        z = position.z - position.x / math.tan(-angle)
        print(round(z, 2))

        #Part.show(Part.makeLine(position, App.Vector(0, 0, z)),  "line")
        #Part.show(Part.makeLine(position, position + vector.normalize() * 500),  "line")

        return (angle, z)
  return None


doc = App.ActiveDocument
body = get_body()

start = time.perf_counter()
pr = cProfile.Profile()
pr.enable()

if body:
  data_x = Slice_Profile(doc, body, intersection_count = 5)
  View_Wireframe_Profile(body.Name, doc, body, data_x)

  data_y = Slice_Waterline(doc, body, intersection_count = 6)
  View_Wireframe_Waterline(body.Name, doc, body, data_y)

  data_z = Slice_CrossSection(doc, body, section_positions = [-1700, -1350, -900, -450, 0, 450, 900, 1350, 1700])
  #data_z = Slice_CrossSection(doc, body, intersection_count = 11)
  View_Wireframe_Body(body.Name, doc, body, data_z)

  #data_xz = Slice_Diagonals(doc, body, data_z, section_positions = [(80, 405.81), (70, 368.50), (60, 326.82), (50, 275.94), (40, 188.63), (30, 0.0)])
  data_xz = Slice_Diagonals(doc, body, data_z, section_positions = [(70, 360), (59, 326.82), (48, 275.94), (35, 188.63), (20, 0.0)])
  #data_xz = Slice_Diagonals(doc, body, data_z, intersection_count = 5)
  View_Wireframe_Diagonals(body.Name, doc, body, data_xz)

  lowest_point = min(data_x.lowest_point, data_y.lowest_point)
  lowest_point = min(lowest_point, data_z.lowest_point)

  Plans(doc, body.Name, lowest_point)

  Components(doc, body.Name, body.Shape, data_xz)  

else:
  print("No hull selected.")

Gui.Selection.clearSelection()
Gui.Selection.addSelection(doc.Name, body.Name)

pr.disable()
pr.dump_stats("profile.cprof")
end = time.perf_counter()
print(f"Took {end - start} seconds")

