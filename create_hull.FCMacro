# vim: set ft=python :

import pdb
import math
import time
import cProfile

import FreeCAD as App
import Part
import Sketcher
from FreeCAD import Vector
from PySide import QtGui
import DraftGeomUtils


def make_hull(doc):
    label = "hull"
    body = doc.addObject('PartDesign::Body','hull')

    assert body.Name.startswith(label)
    hull_index = 0
    if label != body.Name:
      hull_index = int(body.Name[len(label):])

    origin = body.OutList[0]
    plane = [p for p in origin.OutList if "XZ" in p.Name][0]

    deck_length = int(App.ActiveDocument.VarSet.deck_length)
    deck_width = int(App.ActiveDocument.VarSet.deck_width)
    highest = int(App.ActiveDocument.VarSet.Base_deck_height + App.ActiveDocument.VarSet.Base_prow_height) + 1
    lowest = -1
    section_count = App.ActiveDocument.VarSet.section_count
    step_len = deck_length / (section_count - 1)

    # Templates outlining hull shape.
    sketch_profile_deck = doc.getObjectsByLabel('profile_deck')[0]
    sketch_profile_keel = doc.getObjectsByLabel('profile_keel')[0]
    sketch_plan_deck = doc.getObjectsByLabel('plan_deck')[0]
    # These 2 dictate the centre of the arc used to form the curve from the top
    # of the hull deadrise to the deck.
    sketch_hull_curve_height = doc.getObjectsByLabel('hull_curve_height')[0]
    sketch_hull_curve_horizontal = doc.getObjectsByLabel('hull_curve_horizontal')[0]

    additive_loft = body.newObject('PartDesign::AdditiveLoft', f"hull_loft_{hull_index}")
    additive_loft.Ruled = True

    cross_sections = []

    for index, section_pos in enumerate(range(int(-deck_length / 2), int(deck_length / 2) + 1, int(step_len))):
      if section_pos < int(-deck_length / 2) + 1:
        section_pos += 1
      if section_pos > int(deck_length / 2) - 1:
        section_pos -= 1

      section_name = f"section_{index}"
      #print(f"Creating {section_name} at {section_pos}.")

      # Plane for calculating intersections.
      intersection_plane = Part.makePlane(highest * 2, deck_width * 2, App.Vector(-deck_width, -section_pos, 0), App.Vector(0, 1, 0))
      #Part.show(intersection_plane, f"plane_{index}")

      deck_plan_intersection = get_intersection(sketch_plan_deck, intersection_plane, section_pos)
      deck_height_intersection = get_intersection(sketch_profile_deck, intersection_plane, section_pos)
      keel_height_intersection = get_intersection(sketch_profile_keel, intersection_plane, section_pos)
      hull_curve_height_intersection = get_intersection(sketch_hull_curve_height, intersection_plane, section_pos)
      hull_curve_horizontal_intersection = get_intersection(sketch_hull_curve_horizontal, intersection_plane, section_pos)

      section = make_section(
	  body, hull_index, section_name, section_pos,
	  plane, deck_plan_intersection, deck_height_intersection, keel_height_intersection,
	  hull_curve_height_intersection, hull_curve_horizontal_intersection)

      if not cross_sections:
        additive_loft.Profile = section
      else:
        additive_loft.Sections += [section]

      cross_sections.append(section)

      section = simplify_section(section, section_pos,
				 deck_plan_intersection, deck_height_intersection,
				 keel_height_intersection, hull_curve_height_intersection, hull_curve_horizontal_intersection)

      section.Visibility = False

def make_section(doc, hull_index, name, z, plane, deck_plan, deck_height, keel_height, hull_curve_height, hull_curve_horizontal):
  """Create geometry for the hull's cross-section at a specific point between bow and stern."""
  sketch = doc.newObject("Sketcher::SketchObject", name)
  sketch.AttachmentOffset = App.Placement(App.Vector(0, 0, z + hull_index * 4000), App.Rotation(App.Vector(0, 0, 1), 0))
  sketch.AttachmentSupport = (plane,[''])
  sketch.MapMode = 'FlatFace'

  geoList = []
  constraintList = []

  # Starboard
  geoList.append(Part.LineSegment(App.Vector(0.0, 0.0, 0.0), App.Vector(-500.0, 50.0, 0.0)))
  geoList.append(Part.ArcOfCircle(Part.Circle(App.Vector(-474.527130, 540.000000, 0.0), App.Vector(0.000000, 0.000000, 1.000000), 482.076102), 3.159565, 4.597564))

  constraintList.append(Sketcher.Constraint('DistanceX', -1, 1, 0, 1, 0.0))
  constraintList.append(Sketcher.Constraint('Tangent', 1, 2, 0, 2))
  constraintList.append(Sketcher.Constraint('DistanceY', 1, 1, deck_height.Z))
  constraintList.append(Sketcher.Constraint('DistanceY', 0, 1, keel_height.Z))
  constraintList.append(Sketcher.Constraint('DistanceX', 1, 1, deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceX', 1, 3, hull_curve_horizontal.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 1, 3, hull_curve_height.Z))

  # Port
  geoList.append(Part.LineSegment(App.Vector(0.0, 0.0, 0.0), App.Vector(500.0, 50.0, 0.0)))
  geoList.append(Part.ArcOfCircle(Part.Circle(App.Vector(474.527130, 540.000000, 0.0), App.Vector(0.000000, 0.000000, 1.000000), 472.076102), 4.6, 6))

  constraintList.append(Sketcher.Constraint('DistanceX', -1, 1, 2, 1, 0.0))
  constraintList.append(Sketcher.Constraint('Tangent', 2, 2, 3, 1))
  constraintList.append(Sketcher.Constraint('DistanceY', 3, 2, deck_height.Z))
  constraintList.append(Sketcher.Constraint('DistanceY', 2, 1, keel_height.Z))
  constraintList.append(Sketcher.Constraint('DistanceX', 3, 2, -deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceX', 3, 3, -hull_curve_horizontal.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 3, 3, hull_curve_height.Z))

  # Deck
  geoList.append(Part.LineSegment(App.Vector(-500.0, 500.0, 0.0), App.Vector(500.0, 500.0, 0.0)))

  constraintList.append(Sketcher.Constraint('DistanceX', 4, 0, -deck_plan.X * 2))
  constraintList.append(Sketcher.Constraint('DistanceX', 4, 1, deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 4, 0, 0.0))
  constraintList.append(Sketcher.Constraint('DistanceY', 4, 1, deck_height.Z))

  sketch.addGeometry(geoList, False)
  sketch.addConstraint(constraintList)

  #sketch.recompute()

  return sketch

def simplify_section(sketch, z, deck_plan, deck_height, keel_height, hull_curve_height, hull_curve_horizontal):
  """Check if hull's deadrise crosses above the gunwhale, making the arc in the geometry unnecessary (and troublesome)."""
  sketch.recompute()
  if sketch.Shape.Edges and not abs(
      sketch.Shape.Edges[1].LastParameter - sketch.Shape.Edges[1].FirstParameter) > math.pi:
    return sketch

  #print(f"Simplifying section at {z}. {sketch.Name}.")
  sketch.deleteAllConstraints()
  sketch.deleteAllGeometry()

  geoList = []
  constraintList = []

  # Starboard
  geoList.append(Part.LineSegment(App.Vector(0.0, 0.0, 0.0), App.Vector(-250.0, 250.0, 0.0)))
  geoList.append(Part.LineSegment(App.Vector(-250.0, 250.0, 0.0), App.Vector(-500.0, 500.0, 0.0)))
  constraintList.append(Sketcher.Constraint('DistanceX', -1, 1, 0, 1, 0.0))
  constraintList.append(Sketcher.Constraint('DistanceY', 0, 1, keel_height.Z))

  constraintList.append(Sketcher.Constraint('DistanceX', 0, 2, deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 0, 2, deck_height.Z - 0.1))
  constraintList.append(Sketcher.Constraint('DistanceX', 1, 2, deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 1, 2, deck_height.Z - 0.1))

  constraintList.append(Sketcher.Constraint('DistanceX', 1, 1, deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 1, 1, deck_height.Z))

  # Port
  geoList.append(Part.LineSegment(App.Vector(0.0, 0.0, 0.0), App.Vector(250.0, 250.0, 0.0)))
  geoList.append(Part.LineSegment(App.Vector(250.0, 250.0, 0.0), App.Vector(500.0, 500.0, 0.0)))
  constraintList.append(Sketcher.Constraint('DistanceX', -1, 1, 2, 1, 0.0))
  constraintList.append(Sketcher.Constraint('DistanceY', 2, 1, keel_height.Z))

  constraintList.append(Sketcher.Constraint('DistanceX', 2, 2, -deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 2, 2, deck_height.Z - 0.1))
  constraintList.append(Sketcher.Constraint('DistanceX', 3, 2, -deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 3, 2, deck_height.Z - 0.1))

  constraintList.append(Sketcher.Constraint('DistanceX', 3, 1, -deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceY', 3, 1, deck_height.Z))

  # Deck
  geoList.append(Part.LineSegment(App.Vector(-500.0, 500.0, 0.0), App.Vector(500.0, 500.0, 0.0)))

  constraintList.append(Sketcher.Constraint('DistanceX', 4, 1, deck_plan.X))
  constraintList.append(Sketcher.Constraint('DistanceX', 4, 0, -deck_plan.X * 2))
  constraintList.append(Sketcher.Constraint('DistanceY', 4, 0, 0.0))
  constraintList.append(Sketcher.Constraint('DistanceY', 4, 1, deck_height.Z))

  sketch.addGeometry(geoList, False)
  sketch.addConstraint(constraintList)

  return sketch

def get_intersection(sketch, plane, pos):
  for edge in sketch.Shape.Edges:
    points = plane.Surface.intersect(edge.Curve)
    #points = edge.slice(App.Vector(0, 1, 0), pos)
    if not points:
      continue
    for point in points[0]:
      if (plane.isInside(Vector(point.X, point.Y, point.Z), 0.01, True) and 
	  edge.isInside(Vector(point.X, point.Y, point.Z), 0.01, True)):
        return point
  return None


start = time.perf_counter()
pr = cProfile.Profile()
pr.enable()

doc = App.ActiveDocument or App.newDocument()

make_hull(doc)

pr.disable()
pr.dump_stats("profile.cprof")
end = time.perf_counter()
print(f"Took {end - start} seconds")

